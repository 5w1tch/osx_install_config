#!/bin/bash

if [ $EUID != 0 ]; then
    sudo "$0" "$@"
    exit $?
fi
sudo echo password correct, running script...

# checking if the script is run as root
#if [ $(id -u) -ne 0 ]; 
#then su root -- $0 $@;
# else
# echo This script is run as root.
#fi

# choosing the backup and defining $BACKUP variable
export PS3="Bitte Option waehlen: "
select OPTION in BACKUP RESTORE
  do
  echo You selected option $OPTION.
    break
done

###
### defining the variables
###

# backupdate
DATE=$(date +%F)

# user directory
export PS3="Bitte Benutzer waehlen: "
select USER in tom bobby carolin wolfgang toni
  do
  echo You selected user $USER.
    break
done

# master user restore directory
if [[ "$OPTION" == "RESTORE" ]]; 
then
export PS3="Bitte Master User waehlen: "
select MASTERUSER in tom
  do
  echo You selected masteruser $MASTERUSER.
    break
done
else
    :
fi

# user home folder
HOME=Users/$USER

# checking if user directory exists
if [ -d "/$HOME" ]; then
    echo "user home directory exists - running script..."

# path to current working directory
CURRENT_DIR=$(pwd)
#echo $CURRENT_DIR

# path to running script directory
SCRIPT_DIR=$(dirname $0)
#echo $SCRIPT_DIR

###
### backup
###

# checking if backup option was selected
if [[ "$OPTION" == "BACKUP" ]]; 
    then
    echo "running backup..."
    
    # backup destination
    DESTINATION=$HOME/Desktop/backup_"$USER"_"$DATE"
    mkdir -p /$DESTINATION
    echo "1"

    SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")
    # master directory
    cd $SCRIPT_DIR/master
    for TEXTFILES in *.txt
        do
        cd $SCRIPT_DIR/master
        # read first line of textfile and cd to it
        PATH1=$(head -n 1 $TEXTFILES | sed 's"~"/'$HOME'"')
        echo yes
        if [ -d "$PATH1" ]
            then
            cd $PATH1
            echo backing up master $PATH1/...
            cd $SCRIPT_DIR/master
            # read all lines, staring from line 2 and cat them to a list
            SOURCELIST1=$(tail -n +2 $TEXTFILES | cat)
            echo $SOURCELIST1
            for ENTRIES in $SOURCELIST1
                do
                if [ -d "$PATH1/$ENTRIES" ] || [ -f "$PATH1/$ENTRIES" ]
                    then
                    cd $PATH1
                    mkdir -p /$DESTINATION$PATH1
                    rsync -a "$ENTRIES" /$DESTINATION$PATH1
                    else
                    :
                fi
            done
        else
        echo $PATH1 is not a directory, skipping $TEXTFILES
        fi
    done
    # user directory
    cd $SCRIPT_DIR/user
    for TEXTFILES in *.txt
        do
        cd $SCRIPT_DIR/user
        # read first line of textfile and cd to it
        PATH1=$(head -n 1 $TEXTFILES | sed 's"~"/'$HOME'"')
        if [ -d "$PATH1" ]
            then
            cd $PATH1
            echo backing up user $PATH1/...
            cd $SCRIPT_DIR/user
            # read all lines, staring from line 2 and cat them to a list
            SOURCELIST1=$(tail -n +2 $TEXTFILES | cat)
            for ENTRIES in $SOURCELIST1
                do
                if [ -d "$PATH1/$ENTRIES" ] || [ -f "$PATH1/$ENTRIES" ]
                    then
                    cd $PATH1
                    mkdir -p /$DESTINATION$PATH1
                    rsync -a "$ENTRIES" /$DESTINATION$PATH1
                    else
                    :
                fi
            done
        else
        echo $PATH1 is not a directory, skipping $TEXTFILES
        fi
    done
    
    IFS=$SAVEIFS
    echo "backup done ;)"
    
else
    :
fi

###
### restore
###

# place the backup files to the two folders
# /Users/USERNAME/Desktop/restore/master
# /Users/USERNAME/Desktop/restore/user

RESTOREDIR=/$HOME/Desktop/restore
RESTOREMASTERDIR=$RESTOREDIR/master
RESTOREUSERDIR=$RESTOREDIR/user


#RESTORETO=/$HOME/Desktop/testrestore
#mkdir -p $RESTORETO
RESTORETO=""

# checking if restore option was selected
if [[ "$OPTION" == "RESTORE" ]]; 
    then
    echo "running restore..."

    SAVEIFS=$IFS
    IFS=$(echo -en "\n\b")
    # master directory
    cd $SCRIPT_DIR/master
    for TEXTFILES in *.txt
        do
        cd $SCRIPT_DIR/master
        # read first line of textfile and cd to it
        PATH1=$(head -n 1 $TEXTFILES | sed 's"~"/'$HOME'"')
        PATH2=$(head -n 1 $TEXTFILES | sed 's"~"/'Users/$MASTERUSER'"')
        if [ -d "$PATH1" ]
            then
            echo restoring master $PATH1/...
            cd $SCRIPT_DIR/master
            # read all lines, staring from line 2 and cat them to a list
            SOURCELIST1=$(tail -n +2 $TEXTFILES | cat)
            for ENTRIES in $SOURCELIST1
                do
                if [ -d "$RESTOREMASTERDIR$PATH2/$ENTRIES" ] || [ -f "$RESTOREMASTERDIR$PATH2/$ENTRIES" ]
                    then
                    cd $RESTORETO$PATH1
                    rm -rf "$ENTRIES"
                    cd $RESTOREMASTERDIR$PATH2
                    mkdir -p $RESTORETO$PATH1
                    rsync -a "$ENTRIES" $RESTORETO$PATH1
                    else
                    echo bull
                fi
            done
        else
        echo $PATH1 is not a directory, skipping $TEXTFILES
        fi
    done
    # user directory
    cd $SCRIPT_DIR/user
    for TEXTFILES in *.txt
        do
        cd $SCRIPT_DIR/user
        # read first line of textfile and cd to it
        PATH1=$(head -n 1 $TEXTFILES | sed 's"~"/'$HOME'"')
        PATH2=$(head -n 1 $TEXTFILES | sed 's"~"/'Users/$MASTERUSER'"')
        if [ -d "$PATH1" ]
            then
            echo restoring user $PATH1/...
            cd $SCRIPT_DIR/user
            # read all lines, staring from line 2 and cat them to a list
            SOURCELIST1=$(tail -n +2 $TEXTFILES | cat)
            for ENTRIES in $SOURCELIST1
                do
                if [ -d "$RESTOREUSERDIR$PATH1/$ENTRIES" ] || [ -f "$RESTOREUSERDIR$PATH1/$ENTRIES" ]
                    then
                    cd $RESTORETO$PATH1
                    rm -rf "$ENTRIES"
                    cd $RESTOREUSERDIR$PATH1
                    mkdir -p $RESTORETO$PATH1
                    rsync -a "$ENTRIES" $RESTORETO$PATH1
                    else
                    :
                fi
            done
        else
        echo $PATH1 is not a directory, skipping $TEXTFILES
        fi
    done
    
    IFS=$SAVEIFS
    echo "restore done ;)"

else
    :
fi
#
else
    echo "user home directory does not exist - exiting script..."
    exit
fi

